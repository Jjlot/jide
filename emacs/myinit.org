#+STARTUP: show2levels
* Content :toc:
- [[#view][VIEW]]
- [[#font][Font]]
- [[#swiper][Swiper]]
- [[#org-mode][Org-mode]]
- [[#temporary][Temporary]]

* VIEW
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (load-theme 'leuven t)

  (setq scroll-step 1 scroll-conservatively 10000)

  (use-package nyan-mode
    :ensure t
    :config
    (nyan-mode t)
    (nyan-start-animation))

  (blink-cursor-mode 0)
  (global-hl-line-mode t)
  (global-display-line-numbers-mode)
  (use-package imenu-list
    :ensure t
    :config
    (progn
      (setq imenu-list-size 0.2)
      (setq imenu-list-position 'right)
      (setq imenu-list-focus-after-activation nil
	    imenu-list-auto-resize nil)))
  (imenu-list-smart-toggle)

#+end_src
* Font
#+begin_src emacs-lisp
  ;; Set default font
  (cond
   ((eq system-type 'windows-nt)
    (when (find-font (font-spec :name "Cascadia Code"))
      (set-face-attribute 'default nil
			  :family "Cascadia Code"
			  :height 95)))
   ((eq system-type 'gnu/linux)
    (when (find-font (font-spec :name "Jetbrains Mono"))
      (set-face-attribute 'default nil
			  :family "Jetbrains Mono"
			  :height 110))))
  ;; Specify font for all unicode characters
  (when (find-font (font-spec :name "Segoe UI Symbol"))
    (set-fontset-font t 'unicode "Segoe UI Symbol" nil 'prepend))
  ;; Specify font for Chinese characters
  (when (find-font (font-spec :name "WenQuanYi Micro Hei"))
    (set-fontset-font t '(#x4e00 . #x9fff) "WenQuanYi Micro Hei"))
  (set-face-attribute 'font-lock-comment-face nil
		      :slant 'italic)
  (set-face-attribute 'font-lock-comment-face nil
		      :slant 'italic)
  (setq-default line-spacing 0.12)
#+end_src
* Swiper
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)
  (use-package ivy-rich
    :hook ((ivy-mode . ivy-rich-mode)))
  (use-package swiper
    :ensure t
    :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d )")
    (global-set-key (kbd "C-s") 'swiper-isearch)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x C-b") 'counsel-switch-buffer))
  (use-package amx
    :init (setq amx-history-length 20))
  #+end_src
* Org-mode
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (custom-set-variables
   '(org-export-html-postample nil)
   '(org-hide-leading-stars t)
   '(org-startup-indented nil))
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package toc-org
    :hook (org-mode .toc-org-mode))
#+end_src
* Temporary
#+begin_src emacs-lisp
  (setq visible-bell t)
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default))

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src
#+begin_src emacs-lisp
  ;; 设置默认读入文件编码
  (prefer-coding-system 'utf-8)
  ;; 设置写入文件编码
  (setq default-buffer-file-coding-system 'utf-8)
#+end_src
